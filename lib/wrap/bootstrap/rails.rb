require "wrap/bootstrap/rails/version"
require "unindent"
require "fileutils"
require "find"

class Wrap::Bootstrap::Rails
  FG_RED = 31
  DIRNAME_MAP = {
    "css" => "stylesheets",
    "js"  => "javascripts",
  }

  def initialize(target_dir, gem_name)
    @wrap_dir = File.expand_path(target_dir)
    @gem_name = gem_name
  end

  def create_gem!
    check_gem_dir_existence
    check_bundler_existence

    system("bundle", "gem", gem_name)
    enginize_gem
    add_railtie_dependency

    copy_assets
    fix_asset_references
    write_readme
  end

  private

  # Define Rails::Engine to export vendor/assets directory to rails app.
  def enginize_gem
    source = <<-EOS.unindent
      require "#{gem_name}/version"

      module #{gem_name.capitalize}
        module Rails
          class Engine < ::Rails::Engine
          end
        end
      end
    EOS

    gem_path = File.join(gem_dir, "lib", "#{gem_name}.rb")
    File.write(gem_path, source)
  end

  def add_railtie_dependency
    gemspec_path = File.join(gem_dir, "#{gem_name}.gemspec")

    lines = File.read(gemspec_path).split("\n")
    lines.insert(-2, "  spec.add_dependency 'railties'")
    File.write(gemspec_path, lines.join("\n"))
  end

  def copy_assets
    asset_src_path = File.join(wrap_dir, "assets")
    FileUtils.mkdir_p(vendor_path)
    FileUtils.cp_r(asset_src_path, vendor_path)

    rename_directories
    separate_namespace
  end

  def fix_asset_references
    Find.find(vendor_path) do |path|
      next unless path.match(/\.css$/)
      update_url_for_asset_pipeline(path)
    end
  end

  def write_readme
    html_path = File.join(wrap_dir, "html", "index.html")
    return unless File.exists?(html_path)

    html = File.read(html_path)

    js_paths = []
    html.scan(/<script src="([^\"]+)"><\/script>/) do
      raw_url = $1
      js_paths << raw_url.gsub(/^\.\.\/assets\/js/, gem_name)
    end

    css_paths = []
    html.scan(/<link rel="stylesheet" href="([^\"]+)" \/>/) do
      raw_url = $1
      css_paths << raw_url.gsub(/^\.\.\/assets\/css/, gem_name)
    end

    source = <<-EOS.unindent
      # #{gem_name.capitalize}

      Wrap Bootstrap design template - #{gem_name.capitalize}  
      This gem is generated by [wrap-bootstrap-rails](https://github.com/k0kubun/wrap-bootstrap-rails)

      ## Usage

      1. You have to purchase a license to use this design template at [WrapBootstrap](https://wrapbootstrap.com/)
      2. Add this line to your application's Gemfile:

      ```ruby
      gem '#{gem_name}', git: 'git://github.com/#{gem_name}/#{gem_name}.git'
      ```

      ## Javascripts

      You may want to require:

      ```
      #{js_paths.map{ |path| '//= require ' + path }.join("\n      ")}
      ```

      ## Stylesheets

      You may want to require:

      ```
      /*
      #{css_paths.map{ |path| ' *= require ' + path }.join("\n      ")}
       */
      ```
    EOS

    readme_path = File.join(gem_dir, "README.md")
    File.write(readme_path, source)
  end

  def update_url_for_asset_pipeline(path)
    source = File.read(path)
    source.gsub!(/url\((\"|\')(.+?)(\'|\")\)/) do
      url = $2
      case url
      when /^\.\.\//
        url.gsub!(/^\.\.\/[^\/]+/, "/assets/#{gem_name}")
      when /^[^\/]+\//
        url.gsub!(/^[^\/]+/, "/assets/#{gem_name}")
      end
      "url('#{url}')"
    end

    File.write(path, source)
  end

  def rename_directories
    DIRNAME_MAP.each do |org_name, new_name|
      org_path = File.join(vendor_path, "assets", org_name)
      if File.exists?(org_path)
        new_path = File.join(vendor_path, "assets", new_name)
        FileUtils.mv(org_path, new_path)
      end
    end
  end

  def separate_namespace
    working_dir = File.join("/tmp", "wrap-bootstrap-rails", gem_name)

    vendor_assets_path = File.join(vendor_path, "assets")
    Dir.foreach(vendor_assets_path) do |dir|
      next if dir.match(/^\./)
      target_dir = File.join(vendor_assets_path, dir)

      FileUtils.rm_rf(working_dir)
      FileUtils.mkdir_p(working_dir)
      copy_all_in(target_dir, working_dir)
      FileUtils.mv(working_dir, target_dir)
    end
  end

  def copy_all_in(src_dir, dst_dir)
    Dir.foreach(src_dir) do |dir|
      next if dir.match(/^\./)

      target_path = File.join(src_dir, dir)
      dst_path = File.join(dst_dir, dir)
      FileUtils.mv(target_path, dst_path)
    end
  end

  def check_gem_dir_existence
    if File.exists?(gem_dir)
      abort_execution("Gem create destination ('#{gem_dir}') already exists.")
    end
  end

  def check_bundler_existence
    if `which bundle`.empty?
      abort_execution("Could not find bundle in your PATH.")
    end
  end

  def abort_execution(message)
    puts "\033[#{FG_RED}m#{message} Aborting.\033[0m"
    exit
  end

  def vendor_path
    @vendor_path ||= File.join(gem_dir, "vendor")
  end

  def gem_name
    @gem_name
  end

  def gem_dir
    @gem_dir ||= File.join(File.expand_path("."), gem_name)
  end

  def wrap_dir
    @wrap_dir
  end
end
